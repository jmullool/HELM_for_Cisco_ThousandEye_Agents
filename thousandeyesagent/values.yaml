## insert your thousand eyes account token in the space below in base64 format. A secret will be created with this data.
## To generate base64, run this command "echo -n '<insert token>' | base64". It is recommended to insert this at the command 
## line via the "--set account_token=<value> command when running helm install or in a values override file withe the "-f" option.

account_token:

## set the proper image if you don't want the latest

image:
  repository: thousandeyes/enterprise-agent 
  tag: latest 


## When setnode is enabled=true, a specific k8s cluster node can be selected to run the thousand eye agent pod. When enabled, set the nodename to match 
## the desired node to deploy the pod. By default this is set to false.
## example:
## setnode:
##   enabled: true
##   nodename: kubenode1

setnode:
  enabled: false 
  nodename: {}

## To persist data to a specific directory on the node (where the node can be set via setnode.nodename above), set the persistence flag. 
##
## When persistence is enabled=false (default), kubernetes will mount an EmptyDir for all log and agent data (which is accessible at 
## /var/lib/kubelet/pods/{podid}/volumes/kubernetes.io~empty-dir/ on the specific host, while the pod is created). 
## When the pod/deployment/helm is deleted the EmptyDir is cleaned of it's data. You should then delete the agent from the thousand eye dashbaord.
## If you re-install with the same helm release name, a new agent will be created using a new log/data file location and the thousand eye dashboard will 
## learn of a new agent (even if the previous agent was not deleted).
##  
## When persistence is enabled=true, set the directory which will be mounted on the host, such as "/opt/thousandeyes/" (directory does not need to exist first)
## Log and agent data would then be saved at that path within a release name directory that is autocreated. This data will persist if the Deployment/HELM 
## chart is deleted. If the same release named chart/deployment is now re-installed, the previous agent data will be picked up and the same agent name 
## already on the the thousand eye dashboard will be used, including all test settings.
## example:
## persistence:
##   enabled: true
##   directory_path: /opt/thousandeyes/


persistence:
  enabled: false
  directory_path: {}


## Enabling Host Networking

## This is an advanced topic, but if you would like the agent to use the IP of the host node interface (and not recieve an IP from the CNI overlay network), 
## then enable this flag. The probe/pod will use the routing table of the host node to select an exiting interface and then use that IP as the source IP. 
## Note if you have multiple NICs on the host this can get very complex.


host_networking_mode:
  enabled: false
 
## Opening a incoming port on the agent pod

## To open a specific port on the agent to receive "outside-to-inside" test traffic, where the traffic is initiated from the outside (note this is not required if 
## the test source is initiated from the inside (i.e. from the agent)), set allow_outside_initiated_traffic=true. Then, if host_networking_mode is disabled, set 
## the **unique** (cluster wide) port number (from nodePort allowable range 30000-32767) that the incomming traffic will be received on. This will create a 
## kubernetes NodePort service object. If host_networking_mode is enabled, then no kubernetes service object is created as any IP on the host/node can be used 
## but a **unique** (per node) port number is requried (no restriction on allowable range). 

allow_outside_initiated_traffic:
  enabled: false
  port: {} 

